{
  "version":"1.0",
  "data":{
    "sheets":[
      {
        "name":"Sheet",
        "blocks":[
          {
            "type":"MD",
            "text":"### Setup",
            "outputs":[
              
            ],
            "language":"MARKDOWN",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"# Main\nimport numpy as np\nimport pandas as pd\n\n# Unit root\nfrom quantileADF import QADF\nfrom report import countryReport, reportCountries\n\n# Utilities\nimport warnings\nfrom statsmodels.tools.sm_exceptions import IterationLimitWarning\nwarnings.simplefilter('ignore', IterationLimitWarning)\npd.set_option('display.max_rows', 500)\n\n# Setting up Urls\nrepoUrl = 'https:\/\/raw.githubusercontent.com\/vlad-yeghiazaryan\/QADF\/master\/data\/'\ndatasetUrl = repoUrl + 'dataset.csv'\nbroadREERsUrl = repoUrl + 'broadREERs.csv'\nnarrowREERsUrl = repoUrl + 'narrowREERs.csv'",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"MD",
            "text":"### Report",
            "outputs":[
              
            ],
            "language":"MARKDOWN",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"broadREERs = pd.read_csv(broadREERsUrl, index_col=0, parse_dates=True)\nnarrowREERs = pd.read_csv(narrowREERsUrl, index_col=0, parse_dates=True)\n\n# Extracting country information\ncountries = ['Armenia', 'Belarus', 'Kazakhstan', 'Kyrgyz Republic',\n             'Moldova', 'Russian Federation', 'Tajikistan', 'Ukraine']\n\nstartDate = '2000-01-01'\nstartDateWithoutTaj = '1995-01-01'\n\ndataNarrow =  narrowREERs[countries].loc[startDate:]\ndataNarrow.index.freq = 'MS'\n\ndata = broadREERs[countries].loc[startDate:]\ndata.index.freq = 'MS'\n\ndata.info()",
            "outputs":[
              {
                "stdout":"<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 251 entries, 2000-01-01 to 2020-11-01\nFreq: MS\nData columns (total 8 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Armenia             251 non-null    float64\n 1   Belarus             251 non-null    float64\n 2   Kazakhstan          251 non-null    float64\n 3   Kyrgyz Republic     251 non-null    float64\n 4   Moldova             251 non-null    float64\n 5   Russian Federation  251 non-null    float64\n 6   Tajikistan          251 non-null    float64\n 7   Ukraine             251 non-null    float64\ndtypes: float64(8)\nmemory usage: 17.6 KB\n",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"data.head(2)",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  {
                    "html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n<\/style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>Armenia<\/th>\n      <th>Belarus<\/th>\n      <th>Kazakhstan<\/th>\n      <th>Kyrgyz Republic<\/th>\n      <th>Moldova<\/th>\n      <th>Russian Federation<\/th>\n      <th>Tajikistan<\/th>\n      <th>Ukraine<\/th>\n    <\/tr>\n    <tr>\n      <th>Date<\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n      <th><\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>2000-01-01<\/th>\n      <td>67.584163<\/td>\n      <td>121.249657<\/td>\n      <td>77.580923<\/td>\n      <td>76.395403<\/td>\n      <td>67.088115<\/td>\n      <td>47.243677<\/td>\n      <td>110.087088<\/td>\n      <td>74.340017<\/td>\n    <\/tr>\n    <tr>\n      <th>2000-02-01<\/th>\n      <td>68.494432<\/td>\n      <td>109.552717<\/td>\n      <td>78.210787<\/td>\n      <td>76.987894<\/td>\n      <td>66.917751<\/td>\n      <td>47.791244<\/td>\n      <td>109.455091<\/td>\n      <td>75.456058<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<\/div>",
                    "type":"html"
                  }
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"levels=[0.01,0.05,0.1]\nquantiles = np.arange(0.1, 1, 0.1)\ndrop = ['δ²', 'Lags', 'ρ₁(OLS)', 'CV1%', 'CV5%', 'CV10%']\nqadf = QADF(model='c', pmax=12, ic='AIC')\nreps = 1000\nlogDataEAEU = data.apply(np.log, axis=1).loc['2015-1-1':]\nlogDataBeforeEAEU = data.apply(np.log, axis=1).loc[:'2014-12-1']\nlogDataTransitionPeriod = data.apply(np.log, axis=1).loc['2012-1-1':'2015-12-1']",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"# # Broad EAEU logs\n# logResults, logReport = reportCountries(data.apply(np.log, axis=1), qadf, quantiles, repetitions=reps, \n#                                   significanceLevels=levels, dropColumns=drop)\n# logReport.to_excel('Outputs\/logReport.xlsx', float_format=\"%.3f\")\n\n# # Broad EAEU logs (EAEU only)\n# EAEU_Results, EAEU_Report = reportCountries(logDataEAEU, qadf, quantiles, repetitions=reps, \n#                                   significanceLevels=levels, dropColumns=drop)\n# EAEU_Report.to_excel('Outputs\/EAEU_Report.xlsx', float_format=\"%.3f\")\n\n# Broad EAEU logs (before EAEU)\nbeforeEAEU_Results, beforeEAEU_Report = reportCountries(logDataBeforeEAEU, qadf, quantiles, repetitions=reps, \n                                  significanceLevels=levels, dropColumns=drop)\nbeforeEAEU_Report.to_excel('Outputs\/beforeEAEU_Report.xlsx', float_format=\"%.3f\")\n\n# Broad EAEU logs (transition period)\ntransitionPeriod_Results, transitionPeriod_Report = reportCountries(logDataTransitionPeriod, qadf, quantiles, repetitions=reps, \n                                  significanceLevels=levels, dropColumns=drop)\ntransitionPeriod_Report.to_excel('Outputs\/transitionPeriod_Report.xlsx', float_format=\"%.3f\")",
            "outputs":[
              {
                "stdout":"Starting Execution:\n\nArmenia finished in: 1526.93s\nBelarus finished in: 4553.2s\nKazakhstan finished in: 4030.31s\nKyrgyz Republic finished in: 3751.13s\nMoldova finished in: 3904.17s\nRussian Federation finished in: 4090.89s\nTajikistan finished in: 4195.3s\nUkraine finished in: 7262.7s\n\nTotal time spent executing: 555m, 15s\nStarting Execution:\n\nArmenia finished in: 4344.08s\nBelarus finished in: 6629.42s\nKazakhstan finished in: 4478.38s\nKyrgyz Republic finished in: 4293.23s\nMoldova finished in: 4579.58s\n",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          },
          {
            "type":"CODE",
            "text":"EAEU_Report",
            "outputs":[
              {
                "stdout":"",
                "stderr":"",
                "outputReprs":[
                  
                ],
                "displayData":[
                  
                ]
              }
            ],
            "language":"PYTHON",
            "inputCollapsed":false,
            "outputCollapsed":false
          }
        ]
      }
    ],
    "packages":[
      {
        "name":"numba",
        "source":"CONDA"
      },
      {
        "name":"openpyxl",
        "source":"CONDA"
      }
    ],
    "kernelType":"IPYTHON",
    "language":"PYTHON"
  }
}